C51 COMPILER V9.60.0.0   CODEX                                                             04/03/2021 10:53:37 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CODEX
OBJECT MODULE PLACED IN .\Objects\codex.obj
COMPILER INVOKED BY: D:\programs_files\C51\BIN\C51.EXE codex.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\codex.lst) TABS(2) OBJECT(.\Objects\codex.obj)

line level    source

   1          #include<reg51.h>
   2          #include<string.h>
   3          
   4          
   5          #define Error  13    // Any value other than 0 to 9 is good here
   6          
   7          //Function declarations
   8          void cct_init(void);
   9          void delay(int);
  10          void lcdinit(void);
  11          void writecmd(int);
  12          void writedata(char);
  13          void writeline(char[]);
  14          void ReturnHome(void);
  15          char READ_SWITCHES(void);
  16          char get_key(void);
  17          int get_num(char);
  18          char get_func(char);
  19          void DispError(int);
  20          void disp_num(int);
  21          
  22          //Pin description
  23          /*
  24          P2 is data bus
  25          P3.7 is RS
  26          P3.6 is E
  27          P1.0 to P1.3 are keypad row outputs
  28          P1.4 to P1.7 are keypad column inputs
  29          */
  30          
  31          // Define Pins
  32          
  33          sbit RowA = P1^0;     //RowA
  34          sbit RowB = P1^1;     //RowB
  35          sbit RowC = P1^2;     //RowC
  36          sbit RowD = P1^3;     //RowD
  37          
  38          sbit C1   = P1^4;     //Column1
  39          sbit C2   = P1^5;     //Column2
  40          sbit C3   = P1^6;     //Column3
  41          sbit C4   = P1^7;     //Column4
  42          
  43          sbit E    = P3^6;     //E pin for LCD
  44          sbit RS   = P3^7;     //RS pin for LCD
  45          
  46          // Main program
  47          
  48          int main(void)
  49          {
  50   1         char key;                     //key char for keeping record of pressed key
  51   1         int num1 = 0;                 //First number
  52   1         char func = '+';              //Function to be performed among two numbers
  53   1         int num2 = 0;                 //Second number
  54   1         
C51 COMPILER V9.60.0.0   CODEX                                                             04/03/2021 10:53:37 PAGE 2   

  55   1         cct_init();                   //Make input and output pins as required
  56   1         lcdinit();                    //Initilize LCD
  57   1      
  58   1         while(1)
  59   1         { 
  60   2           //get numb1
  61   2           key = get_key();
  62   2           writecmd(0x01);            //clear display
  63   2         writedata(key);            //Echo the key pressed to LCD
  64   2         num1 = get_num(key);       //Get int number from char value, it checks for wrong input as well
  65   2           
  66   2         if(num1!=Error)            //if correct input then proceed, num1==Error means wrong input
  67   2         {
  68   3           //get function
  69   3           key = get_key();
  70   3           writedata(key);                  //Echo the key pressed to LCD
  71   3           func = get_func(key);            //it checks for wrong func
  72   3           
  73   3           if(func!='e')                    //if correct input then proceed, func=='e' means wrong input
  74   3           {
  75   4             //get numb2
  76   4             key = get_key();
  77   4             writedata(key);              //Echo the key pressed to LCD
  78   4             num2 = get_num(key);         //Get int number from char value, it checks for wrong input as well
  79   4             
  80   4             if(num2!=Error)              //if correct input then proceed, num2==Error means wrong input
  81   4             {
  82   5               //get equal sign
  83   5               key = get_key();
  84   5               writedata(key);          //Echo the key pressed to LCD
  85   5               
  86   5               if(key == '=')           //if = is pressed then proceed
  87   5               {
  88   6                 switch(func)         //switch on function
  89   6                 {
  90   7                 case '+': disp_num(num1+num2); break;
  91   7                 case '-': disp_num(num1-num2); break;
  92   7                 case 'x': disp_num(num1*num2); break;
  93   7                 case '/': disp_num(num1/num2); break;
  94   7                 }
  95   6               }
  96   5               else             //key other then = here means error wrong input
  97   5               { 
  98   6                 if(key == 'C')       //if clear screen is pressed then clear screen and reset
  99   6                  writecmd(0x01);   //Clear Screen
 100   6                 else
 101   6                  DispError(0);     //Display wrong input error
 102   6               }                                 
 103   5             }
 104   4           }
 105   3           }
 106   2         }
 107   1      }
 108          
 109          
 110          void cct_init(void)
 111          {
 112   1        P0 = 0x00;   //not used
 113   1        P1 = 0xf0;   //used for generating outputs and taking inputs from Keypad
 114   1        P2 = 0x00;   //used as data port for LCD
 115   1        P3 = 0x00;   //used for RS and E   
 116   1      }
C51 COMPILER V9.60.0.0   CODEX                                                             04/03/2021 10:53:37 PAGE 3   

 117          
 118          void delay(int a)
 119          {
 120   1         int i;
 121   1         for(i=0;i<a;i++);   //null statement
 122   1      }
 123          
 124          void writedata(char t)
 125          {
 126   1         RS = 1;             // This is data
 127   1         P2 = t;             //Data transfer
 128   1         E  = 1;             // => E = 1
 129   1         delay(150);
 130   1         E  = 0;             // => E = 0
 131   1         delay(150);
 132   1      }
 133          
 134          
 135          void writecmd(int z)
 136          {
 137   1         RS = 0;             // This is command
 138   1         P2 = z;             //Data transfer
 139   1         E  = 1;             // => E = 1
 140   1         delay(150);
 141   1         E  = 0;             // => E = 0
 142   1         delay(150);
 143   1      }
 144          
 145          void lcdinit(void)
 146          {
 147   1           delay(15000);
 148   1         writecmd(0x30);
 149   1           delay(4500);
 150   1         writecmd(0x30);
 151   1           delay(300);
 152   1         writecmd(0x30);
 153   1           delay(650);
 154   1        
 155   1         writecmd(0x38);    //function set
 156   1         writecmd(0x0c);    //display on,cursor off,blink off
 157   1         writecmd(0x01);    //clear display
 158   1         writecmd(0x06);    //entry mode, set increment
 159   1      }
 160          
 161          void ReturnHome(void)     /* Return to 0 cursor location */
 162          {
 163   1         writecmd(0x02);
 164   1         delay(1500);
 165   1      }
 166          
 167          void writeline(char Line[])
 168          {
 169   1         int i;
 170   1         for(i=0;i<strlen(Line);i++)
 171   1         {
 172   2            writedata(Line[i]);     /* Write Character */
 173   2         }
 174   1         
 175   1         ReturnHome();          /* Return to 0 cursor position */
 176   1      }
 177          
 178          char READ_SWITCHES(void)  
C51 COMPILER V9.60.0.0   CODEX                                                             04/03/2021 10:53:37 PAGE 4   

 179          { 
 180   1        RowA = 0; RowB = 1; RowC = 1; RowD = 1;   //Test Row A
 181   1      
 182   1        if (C1 == 0) { delay(10000); while (C1==0); return '7'; }
 183   1        if (C2 == 0) { delay(10000); while (C2==0); return '8'; }
 184   1        if (C3 == 0) { delay(10000); while (C3==0); return '9'; }
 185   1        if (C4 == 0) { delay(10000); while (C4==0); return '/'; }
 186   1      
 187   1        RowA = 1; RowB = 0; RowC = 1; RowD = 1;   //Test Row B
 188   1      
 189   1        if (C1 == 0) { delay(10000); while (C1==0); return '4'; }
 190   1        if (C2 == 0) { delay(10000); while (C2==0); return '5'; }
 191   1        if (C3 == 0) { delay(10000); while (C3==0); return '6'; }
 192   1        if (C4 == 0) { delay(10000); while (C4==0); return 'x'; }
 193   1        
 194   1        RowA = 1; RowB = 1; RowC = 0; RowD = 1;   //Test Row C
 195   1      
 196   1        if (C1 == 0) { delay(10000); while (C1==0); return '1'; }
 197   1        if (C2 == 0) { delay(10000); while (C2==0); return '2'; }
 198   1        if (C3 == 0) { delay(10000); while (C3==0); return '3'; }
 199   1        if (C4 == 0) { delay(10000); while (C4==0); return '-'; }
 200   1        
 201   1        RowA = 1; RowB = 1; RowC = 1; RowD = 0;   //Test Row D
 202   1      
 203   1        if (C1 == 0) { delay(10000); while (C1==0); return 'C'; }
 204   1        if (C2 == 0) { delay(10000); while (C2==0); return '0'; }
 205   1        if (C3 == 0) { delay(10000); while (C3==0); return '='; }
 206   1        if (C4 == 0) { delay(10000); while (C4==0); return '+'; }
 207   1      
 208   1        return 'n';             // Means no key has been pressed
 209   1      }
 210          
 211          char get_key(void)           //get key from user
 212          {
 213   1        char key = 'n';              //assume no key pressed
 214   1      
 215   1        while(key=='n')              //wait untill a key is pressed
 216   1          key = READ_SWITCHES();   //scan the keys again and again
 217   1      
 218   1        return key;                  //when key pressed then return its value
 219   1      }
 220          
 221          int get_num(char ch)         //convert char into int
 222          {
 223   1        switch(ch)
 224   1        {
 225   2          case '0': return 0; break;
 226   2          case '1': return 1; break;
 227   2          case '2': return 2; break;
 228   2          case '3': return 3; break;
 229   2          case '4': return 4; break;
 230   2          case '5': return 5; break;
 231   2          case '6': return 6; break;
 232   2          case '7': return 7; break;
 233   2          case '8': return 8; break;
 234   2          case '9': return 9; break;
 235   2          case 'C': writecmd(0x01); return Error; break;  //this is used as a clear screen and then reset by setti
             -ng error
 236   2          default: DispError(0); return Error; break;     //it means wrong input
 237   2        }
 238   1      }
 239          
C51 COMPILER V9.60.0.0   CODEX                                                             04/03/2021 10:53:37 PAGE 5   

 240          char get_func(char chf)            //detects the errors in inputted function
 241          {
 242   1        if(chf=='C')                   //if clear screen then clear the LCD and reset
 243   1        { 
 244   2          writecmd(0x01);            //clear display
 245   2          return 'e'; 
 246   2        }
 247   1        
 248   1        if( chf!='+' && chf!='-' && chf!='x' && chf!='/' )  //if input is not from allowed funtions then show err
             -or
 249   1        { 
 250   2          DispError(1); 
 251   2          return 'e'; 
 252   2        }
 253   1      
 254   1        return chf;                        //function is correct so return the correct function
 255   1      }
 256          
 257          
 258          void DispError(int numb)           //displays differet error messages
 259          {
 260   1        writecmd(0x01);                //clear display
 261   1        
 262   1        switch(numb)
 263   1        {
 264   2        case 0:   writeline("Wrong Input");      break;
 265   2        case 1:   writeline("Wrong Function");   break;
 266   2        default:    writeline("Wrong Input");      break;
 267   2        }
 268   1      }
 269          
 270          void disp_num(int numb)            //displays number on LCD
 271          { 
 272   1        unsigned char UnitDigit  = 0;  //It will contain unit digit of numb
 273   1        unsigned char TenthDigit = 0;  //It will contain 10th position digit of numb
 274   1      
 275   1        if(numb<0)
 276   1        {
 277   2          numb = -1*numb;  // Make number positive
 278   2          writedata('-');  // Display a negative sign on LCD
 279   2        }
 280   1      
 281   1        TenthDigit = (numb/10);           // Findout Tenth Digit
 282   1      
 283   1        if( TenthDigit != 0)            // If it is zero, then don't display
 284   1          writedata(TenthDigit+0x30);   // Make Char of TenthDigit and then display it on LCD
 285   1      
 286   1        UnitDigit = numb - TenthDigit*10;
 287   1      
 288   1        writedata(UnitDigit+0x30);    // Make Char of UnitDigit and then display it on LCD
 289   1      }
 290          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    926    ----
   CONSTANT SIZE    =     27    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.60.0.0   CODEX                                                             04/03/2021 10:53:37 PAGE 6   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
